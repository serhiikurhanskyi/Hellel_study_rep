# Задача 1
# Проработать встроенние функции множеств.
# Встроенние функции можно взять на сайте
# (https://www.programiz.com/python-programming/set).
# Но на єтом сайте приведени примери
# для списков, Задача переделать примери для множеств.

a = {1, 2, 3, 10}
print(all(a))

b = set()
print(any(b))

a = {'bread', 'milk', 'butter'}
print(enumerate(a))

b = {1, 2, 3, 10}
print(len(b))

a = {1, 2, 3, 10}
print(max(a))

a = {1, 2, 3, 10}
print(min(a))

a = {1, 2, 3, 10}
print(sum(a))

a = {10, 3, 2, 1}
print(sorted(a))


# Задача 2
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить intersection єтих множеств

set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print(set1 & set2 & set3)

# Задача 3
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить difference єтих множеств

set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print(set1-set2-set3)

# Задача 4
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить union єтих множеств

set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print(set1 | set2 | set3)

# Задача 5
# Добавить список элементов к заданному набору
# sampleSet = {"Yellow", "Orange", "Black"}
# sampleList = ["Blue", "Green", "Red"]

sampleSet = {"Yellow", "Orange", "Black"}
sampleList = ["Blue", "Green", "Red"]
sampleSet.update(sampleList)


# Задача 6
# Вернуть новый набор идентичных предметов из заданных двух наборов
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection(set2)

# Задача 7
# Возвращает новый набор со всеми элементами из обоих наборов, удаляя дубликаты.
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.union(set2)

# Задача 8
# Учитывая два набора Python, обновите первый набор элементами,
# которые существуют только в первом наборе, но не во втором наборе.
# set1 = {10, 20, 30}
# set2 = {20, 40, 50}

set1 = {10, 20, 30}
set2 = {20, 40, 50}
set1.difference_update(set2)

# Задача 9
# Удалите єлементи 10, 20, 30 из следующего набора
# set1 = {10, 20, 30, 40, 50}

set1 = {10, 20, 30, 40, 50}
set1.difference_update({10, 20, 30})

# Задача 11
# Проверьте, есть ли в двух наборах какие-либо общие элементы. Если да, отобразите общие элементы.
# set1 = {10, 20, 30, 40, 50}
# set2 = {60, 70, 80, 90, 10}

set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
if set1.isdisjoint(set2):
    print("Нет общих элементов")
else:
    print(set1.intersection(set2))

# Задача 12
# Обновите набор 1, добавив элементы из набора 2
# set1 = {10, 20, 30, 40, 50}
# set2 = {60, 70, 80, 90, 10}

set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
set1.symmetric_difference_update(set2)

# Задача 13
# Удалите элементы из set1, которые не являются общими для set1 и set2
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
